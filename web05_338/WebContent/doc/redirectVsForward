
2020-05-15


redirect와 forward의 차이 
jsp 환경에서 현재 작업중인 페이지에서 다른 페이지로 이동하는 두 가지 방식의 
페이지 전환 기능이 있다. 

forward : web container 차원에서 페이지 이동만* 있다. 
실제로 웹 브라우저는 다른 페이지로 이동했음을 알 수 없다.* 
그렇기 때문에 웹 브라우저에는 최초에 호출한 URL이 표시*되고 
이동한 페이지의 URL 정보는 볼 수 없다. 
동일한 웹 컨테이너에 있는 페이지로만 이동할 수 있다. (동일한 웹 컨테이너 = 컨테이너루트) 
현재 실행중인 페이지와 forward에 의해 호출될 페이지는 
request와 response 객체를 공유한다.* 

Redirect : web container는 redirect 명령이 들어오면 웹 브라우저에게
다른 페이지로 이동하라고 명령을 내린다. 
그러면 웹 브라우저는 URL을 지시된 주소로 바꾸고 그 주소로 이동한다. 
다른 웹 켄테이너에 있는 주소로 이동이 가능하다.* (-> 다른 프로젝트로도 넘어갈 수 있다. 와~) 
새로운 페이지에서는 request와 response 객체가 새롭게 생성된다.


웹 개발을 하는 상황에서 둘 다 한 페이지에서 다른 URL로 이동하고자 할 때 사용된다. 
하지만 두 방식은 커다란 차이점을 가지고 있다. 
(include는 데이터전달을 하지만 조합의 기술이니까 페이지전달로서는 사용하지않는다.)
(- 주로 jsp에서 <jsp:include page=""/> 식으로 사용하는 것 외는 거의 사용하지 않는다. )
(- 서블릿에서는 사용하지않고 화면단에서 해더,테일 등 레이아웃할때 사용)

forward 방식은 이동할 때 URL로 요청정보를 그대로 전달한다. 
말 그대로 forward(건네주기)하는 것이다. 
그렇기 때문에 사용자가 최초로 요청한 정보는 다음 URL에서도 유효*하다 

반면 redirect의 경우 최초 요청을 받은 URL1에서 클라이언트에 
redirect할 URL2를 리턴하고, 클라이언트에서는 전혀
새로운 요청*을 생성하여 URL2에 다시 요청을 보낸다. 	(request와 response를 새로 만들어서 보낸다.)
따라서 처음 보냈던 최초의 요청정보는 더 이상 유효하지 않다.* 


---------------------------------------------------------------

<forward 방식>
							컨테이너 forward(url) 
							[			]	나의페이지
사용자			1.request↗	
[			]					2.위임↓
				↖3.response
							[			]	나의페이지
							
---------------------------------------------------------------

<redirect 방식>
							컨테이너 redirect(url1) 
							[			]
사용자			1.request↗
				↙2.response	
[			]					
자기주소를 		 ↘3.request
가지고 다시		↖4.response	[			] url2		

						즉, 새로운 요청응답을 생성해서 이전 첫번째 request에 대한 데이터는 소멸되며
						forward와 달리 url주소도 다른 주소로 변경된다. 

---------------------------------------------------------------

<EX>
게시판 -> 글쓰기 -> 글쓰기 성공페이지	로 이동한다면 어떤 페이지이동 방식으로 구현하는게 좋을까?
- 새로고침을 해도 글쓰기 데이터가 계속 생성되면 안된다.
-> 즉 sendRedirect 사용

@ 	DB에 영향을 줄 것 같은 수정, 삭제, 등록 페이지 등은 
	데이터 보호를 위해 redirect를 사용해야한다.

@ 	조회나 검색은 데이터가 소실되면 안되기 때문에 
	forward를 사용한다. 

---------------------------------------------------------------










2020-05-12

MVC 패턴(pattern)?
MVC 아키텍처(architecture)?
실무에서 다년간 다양한 업무 시스템에 적용되고 검증되어 
좋다고 증명된 경험이나 방법 -> best practice

Model-View-Controller -> MVC
모델 뷰 컨트롤러	: 기능별 분리, separation


MVC의 각 컴포넌트 역할		(컴포넌트:구성요소, 모듈의 단위)
- 컨트롤러 
	: 클라이언트의 요청을 받았을 때 그 요청에 대해 실제 업무를 수행하는 모델 컴포넌트를 호출하는 일이다. 
	또한 클라이언트가 보낸 데이터가 있다면, 모델을 호출할 때 전달하기 쉽게 데이터를 
	적절히 가공하는 일을 한다. 
	모델이 업무 수행을 완료하면, 그 결과를 가지고 화면을 생성하도록 뷰에게 전달한다. 
	즉 클라이언트 요청에 대해 모델과 뷰를 결정하여 전달하는 일을 한다. 
	일종의 조정자라고 할 수 있다. (제어자의 역할 수행)
	
- 모델 컴포넌트 역할	(Dto:Data Transfer Object, VO:Value Object - 서로 수행은 같으나 예전엔 VO였으나 framework 등장 이후 생긴 개념,DTO)
	: *데이터 저장소(예: 데이터베이스, 디렉터리 서비스 등)와 연동*하여	- sql작업 수행
	사용자가 입력한 데이터나 사용자에게 출력할 데이터를 다루는 일을 한다. 
	특히 여러 개의 데이터 변경 작업(추가, 변경, 삭제)를 하나의 작업으로 
	묶은 트랜젝션을 다루는 일도 한다. 

- 뷰 컨포넌트의 역할 
	: 모델이 처리한 데이터나 그 작업 결과를 가지고 사용자에게 출력할 화면을 만드는 일을 한다. 
	이렇게 생성된 화면은 웹 브라우저가 출력한다. 
	즉, 뷰 컴포넌트는 HTML과 CSS, Javascript를 사용하여 웹 브라우저가 출력할 UI를 만든다. 
	

MVC 이점
높은 재사용성, 넓은 융통성 
1. 쉽게 교체할 수 있다. 
2. 원 소스 멀티 유즈를 구현할 수 있다. 
3. 코드를 재사용할 수 있다. 

빠른 개발, 저렴한 비용 
1. 다른 프로젝트에서도 모델 컴포넌트를 재사용할 수 있기 때문에 개발 속도가 빨라진다. 
	자바 개발자는 컨트롤러와 모델 개발에 전념하고 
	jsp개발자나 html개발자는 뷰 개발에 전념할 수 있어서 
	업무 집중도가 높아져서 개발 속도가 빨라진다. 
2. 소스 코드를 역할에 따라 여러 컴포넌트로 쪼개게 되면,
	컴포넌트의 난이도에 따라 좀 더 낮은 수준의 개발자를 투입할 수 있어서 
	전체적인 개발 및 유지보수 비용을 줄일 수 있다. 
		


------------------------------------------------------------------------ 

~ web04_229프로젝트까지는 only servlet 방식

<  only servlet 방식  >
				request		서블릿			서블릿 역할	
[			]	------->	[			]	-데이터 받기
[			]				[			]	-비즈니스 로직
[			]	<-------	[			]	-db 행동 처리
				response					-화면 처리


< MVC pattern ver1:예전버전  >
입력화면			request		controller		request		model : Dto, Vo
[			]	------->	[	제어자	]	------->	[	데이터	]
[			]				[비즈니스로직	]				[	모델		]
[			]	<-------	[			]	<-------	[			]
				response					response			
							    응답↑↓요청
						View[			]
							[			]
							
------------------------------------------------------------------------ 					
							
							